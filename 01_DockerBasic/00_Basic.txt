Docker를 사용하는 이유?

환경을 맞춰서 프로그램 실행에 오류를 없애기 위함.
환경요소(패키지, 프로그램 버젼, OS등..)이 다르면 제대로 프로그램이 안돌아 갈 수 있다.
-> 그럼 각자의 컴퓨터의 환경요소를 맞춰주면 제대로 프로그램이 돌아갈 수 있도록 도와주자 = Docker

[ 기존의 가상화 기술 ]
1. 물리적 서버
2. 가상머신을 설치할 수 있는 HOST OS(windows..)
3. 가상머신 여러대 -> 모두 하나의 물리적 서버에 엮여있음
4. 물리적 서버와 가상머신의 서버가 동시에 돌아가면서 비효율이 초래됨

[ Docker ]
1. 물리적 서버
2. HOST OS
3. Docker Engine : linux 기반의 가상 컴퓨터서버 / 컨테이너 끼리의 차이점을 최소화함(환경요소 통일)!
4. Container : 가상의 컴퓨터 위에 실행할 수 있는 프로그램들(Docker Engine에 맞춤)

-> 서버는 하나만 돌아가지만, Docker만 사용하면 오류를 줄일 수 있다.

====================================================================================================

[ Groomride ]
https://ide.goorm.io/my/dashboard?redirect=1

여기서 미리 Container를 생성할 수 있다.
Container들은 자신이 필요한 패키지와 모듈, 프로그램들이 모두 세팅된 채로 만들어짐
-> 아무 컴퓨터에 있는 Docker에서 돌릴 수 있다!


====================================================================================================

github -> source code다운 -> docker composer를 활용(조합)하여 docker image 만듬
docker image를 acr에 올리고 aks를 통해 배포
Auto Scaling/Node 증가

If. Source Code에서 변경사항이 생기면?
-> docker image를 새롭게 만들고 acr.aks를 업데이트를 해야함

github Action : github에서 소스코드의 변동사항(특정이벤트)를 감지해서 위 변동사항을 자동으로 반영함.
정기정검을 하는 곳은 이런 시스템을 운용하지 않음.

=> 이런 전체구조를 DevOps라고 부름

====================================================================================================
https://zesty-eggplant-4d8.notion.site/Docker-3938644b0fbf490f8b5b63e472113ce6 참고
